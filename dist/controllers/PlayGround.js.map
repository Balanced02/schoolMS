{"version":3,"sources":["../../server/controllers/PlayGround.js"],"names":["Register","req","res","type","body","userType","newUser","register","password","err","user","console","log","status","json","message","createSchool","sid","then","catch","id","Promise","resolve","reject","createUser","data","create","adminObj","email","username","shortCode","phoneNumber","fullName","schoolName","User","Login","salt","undefined","hash","AuthMe","authenticated","RedirectNoAuth","next","redirect","Logout","logout"],"mappings":"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","file":"PlayGround.js","sourcesContent":["import Users from '../models/Users';\nimport Teacher from '../models/Teacher';\nimport Student from '../models/Student';\nimport Admin from '../models/Admin';\nimport School from '../models/School';\nimport { resolve } from 'path';\n\nexport const Register = (req, res) => {\n  let type = req.body.userType;\n  let newUser = new Users({\n    ...req.body,\n    userType: req.body.userType === 'school' ? 'admin' : req.body.userType,\n  });\n  Users.register(newUser, req.body.password, (err, user) => {\n    if (err) {\n      console.log(err);\n      return res.status(400).json({\n        message: err.message,\n      });\n    } else {\n      if (user.userType !== 'super') {\n        if (user.userType) {\n          createSchool(type, req.body, user.sid)\n            .then(user => {\n              return res.json({\n                message: 'Registered Successfully',\n                user: { ...user },\n              });\n            })\n            .catch(err => {\n              console.log(err);\n              return res.status(400).json({\n                message: err.message,\n              });\n            });\n        }\n      } else {\n        res.json({\n          message: 'Registered Successfully',\n          user: { ...user },\n        });\n      }\n    }\n  });\n};\n\nconst createSchool = (userType, body, id) => {\n  console.log(userType);\n  if (userType !== 'school') {\n    return new Promise((resolve, reject) => {\n      console.log(body);\n      createUser(userType, body, id)\n        .then(data => resolve(data))\n        .catch(err => {\n          console.log(err);\n          reject(err);\n        });\n    });\n  }\n\n  School.create({ ...body })\n    .then(user => {\n      console.log(user);\n      let adminObj = {\n        email: user.email,\n        username: user.shortCode,\n        phoneNumber: user.phoneNumber,\n        fullName: user.schoolName,\n      };\n      return new Promise((resolve, reject) =>\n        createUser('admin', adminObj, user.id)\n          .then(data => resolve(data))\n          .catch(err => reject(err))\n      );\n    })\n    .catch(err => reject(err));\n};\n\nconst createUser = (userType, body, id) => {\n  console.log('Creating: ' + userType);\n  let User =\n    userType === 'teacher'\n      ? Teacher\n      : userType === 'student' ? Student : userType === 'admin' ? Admin : Teacher;\n  return new Promise((resolve, reject) => {\n    User.create({ ...body, sid: id })\n      .then(user => {\n        resolve(user);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nexport const Login = (req, res) => {\n  let user = req.user;\n  return res.json({\n    message: 'Login Successful',\n    user: {\n      ...req.user,\n      salt: undefined,\n      hash: undefined,\n    },\n  });\n};\n\n// Get user data from client side\nexport const AuthMe = (req, res) => {\n  if (req.user) {\n    return res.json({\n      authenticated: true,\n      user: req.user,\n    });\n  }\n  return res.json({\n    authenticated: false,\n  });\n};\n\n// Auth Middleware\nexport const RedirectNoAuth = (req, res, next) => {\n  if (!req.user) {\n    return res.redirect('/whatever');\n  }\n  return next();\n};\n\nexport const Logout = (req, res) => {\n  req.logout();\n  res.json({\n    message: 'Logout',\n  });\n};\n"]}