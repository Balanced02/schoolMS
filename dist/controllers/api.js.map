{"version":3,"sources":["../../server/controllers/api.js"],"names":["CreateNotice","req","res","body","date","create","schoolId","user","then","json","notice","catch","status","message","error","err","AllCourse","Promise","all","find","sort","count","courses","GetSchools","limit","schools","SummaryData","accepted","totalStudents","pendingReg","totalStaff","noticeBoard","CreateCourse","courseName","courseCode","minAttendance","description","course","UpdateCourse","_id","findOneAndUpdate","$set","new","VisitorData","newVisitor","visitor","updateVisitor","resolve","reject","data","id","GetVisitors","visitors","GetTeachers","teachers","map","assignedClass","filter","teacher","fullName","d","a","classTitle","join","_doc","classInfo","AllClass","AddClass","UpdateClass","LeaveApplication","teacherId","sid","leave","GetLeave","params","searchQuery","leaves","teacherName","LeaveUpdate","edited","Date","now","NewDepartment","dept","FetchDepartment","CategoryUpdate","GetLeaveCategory","AddUserCategory","GetUserCategory","AddPayHead","GetPayHead","EditSchool","UploadFile","file","send","success","path","createServer","writeHead","end","listen","upload","filename","getImg","response","path_display","readFile","dbx","accessToken","filesUpload","autorename","contents","filesGetTemporaryLink","link","LibraryCategoryUpdate","GetLibraryCategory","UpdateSchool","school","GetUserDetails","userType","console","log","User","findOne","userData","schoolData","UploadUserDetails"],"mappings":"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","file":"api.js","sourcesContent":["import regeneratorRuntime from 'regenerator-runtime';\n\nimport Dropbox from 'dropbox';\nimport multer from 'multer';\nimport crypto from 'crypto';\nimport fs from 'fs';\nimport http from 'http';\n\nimport Notice from '../models/Notice';\nimport Student from '../models/Student';\nimport Users from '../models/Users';\nimport Course from '../models/Course';\nimport Visitor from '../models/Visitor';\nimport Teacher from '../models/Teacher';\nimport Admin from '../models/Admin';\nimport ClassDetails from '../models/ClassDetails';\nimport Leave from '../models/Leave';\nimport Department from '../models/Department';\nimport LeaveCategory from '../models/LeaveCategory';\nimport UserCategory from '../models/UserCategory';\nimport PayHead from '../models/PayHead';\nimport School from '../models/School';\nimport LibraryCategory from '../models/LibraryCategory';\n\nimport { resolve } from 'url';\n\nexport const CreateNotice = (req, res) => {\n  let { date, body } = req.body;\n  Notice.create({\n    date,\n    body,\n    schoolId: req.user.schoolId,\n  })\n    .then(notice => {\n      res.json(notice);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Loading Clients',\n        error: err.message,\n      });\n    });\n};\n\nexport const AllCourse = async (req, res) => {\n  try {\n    let [courses, count] = await Promise.all([\n      Course.find({\n        schoolId: req.user.schoolId,\n      }).sort('date'),\n      Course.find({\n        schoolId: req.user.schoolId,\n      }).count(),\n    ]);\n    return res.json({\n      courses,\n      count,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetSchools = async (req, res) => {\n  try {\n    let [count, schools] = await Promise.all([\n      School.find().count(),\n      School.find()\n        .sort('-created')\n        .limit(25),\n    ]);\n    return res.json({\n      count,\n      schools,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Loading Schools',\n      error: err.message,\n    });\n  }\n};\n\nexport const SummaryData = async (req, res) => {\n  try {\n    let [totalStudents, pendingReg, totalStaff, noticeBoard] = await Promise.all([\n      Student.find({ schoolId: req.user.schoolId }).count(),\n      Student.find({ accepted: true, schoolId: req.user.schoolId }).count(),\n      Users.find({ schoolId: req.user.schoolId }).count(),\n      Notice.find({ schoolId: req.user.schoolId }).sort('-created'),\n    ]);\n    return res.json({\n      totalStudents,\n      pendingReg,\n      totalStaff,\n      noticeBoard,\n    });\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error Loading Clients',\n      error: err.message,\n    });\n  }\n};\n\nexport const CreateCourse = (req, res) => {\n  let { courseName, courseCode, minAttendance, description } = req.body;\n  Course.create({ courseName, courseCode, minAttendance, description, schoolId: req.user.schoolId })\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateCourse = (req, res) => {\n  let { _id, courseName, courseCode, minAttendance, description } = req.body;\n  Course.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const VisitorData = (req, res) => {\n  !req.body._id\n    ? newVisitor({ ...req.body, schoolId: req.user.schoolId })\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        })\n    : updateVisitor()\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        });\n};\n\nconst newVisitor = data => {\n  return new Promise((resolve, reject) => {\n    Visitor.create({ ...data })\n      .then(visitor => {\n        resolve(visitor);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nconst updateVisitor = data => {\n  let id = data._id;\n  return new Promise((resolve, reject) => {\n    Visitor.findOneAndUpdate(\n      { id: data._id },\n      {\n        $set: {\n          ...data,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(visitor => resolve(visitor))\n      .catch(err => reject(err));\n  });\n};\n\nexport const GetVisitors = async (req, res) => {\n  try {\n    let [visitors, count] = await Promise.all([\n      Visitor.find({ schoolId: req.user.schoolId })\n        .sort('-timeIn')\n        .limit(50),\n      Visitor.find({ schoolId: req.user.schoolId }).count(),\n    ]);\n    return res.json({\n      visitors,\n      count,\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetTeachers = async (req, res) => {\n  try {\n    let [teachers, count] = await Promise.all([\n      Teacher.find({ schoolId: req.user.schoolId }),\n      Teacher.find({ schoolId: req.user.schoolId }).count(),\n    ]);\n    let data = await ClassDetails.find({ schoolId: req.user.schoolId }, 'teacher classTitle');\n    teachers = teachers.map(teacher => {\n      let assignedClass = data\n        .filter(d => teacher.fullName === d.teacher)\n        .map(a => a.classTitle)\n        .join(', ');\n      teacher._doc.classInfo = assignedClass ? assignedClass : '';\n      return teacher;\n    });\n    res.json({ teachers });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Loading Teacher Details',\n      error: err.message,\n    });\n  }\n};\n\nexport const AllClass = (req, res) => {\n  ClassDetails.find({ schoolId: req.user.schoolId })\n    .sort('classTitle')\n    .then(data => {\n      res.json({\n        data,\n      });\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error fetching class information',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddClass = (req, res) => {\n  ClassDetails.create({ ...req.body, schoolId: req.user.schoolId })\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Class',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateClass = (req, res) => {\n  let { _id } = req.body;\n  ClassDetails.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Class',\n        error: err.message,\n      });\n    });\n};\n\nexport const LeaveApplication = (req, res) => {\n  Leave.create({ ...req.body, schoolId: req.user.schoolId, teacherId: req.user.sid })\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error creating leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const GetLeave = async (req, res) => {\n  let id = req.params.id;\n\n  let searchQuery = { schoolId: req.user.schoolId };\n  if (id !== 'admin') {\n    searchQuery = {\n      teacherId: id,\n    };\n  }\n  try {\n    let [leaves, count] = await Promise.all([\n      Leave.find(searchQuery).sort('-status'),\n      Leave.find(searchQuery).count(),\n    ]);\n\n    let data = await Teacher.find({ schoolId: req.user.schoolId }, 'sid fullName');\n    leaves = leaves.map(leave => {\n      let teacherName = data.filter(d => leave.teacherId === d.sid)[0];\n      leave._doc.teacherName = teacherName ? teacherName.fullName : '';\n      return leave;\n    });\n    res.json(leaves);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error getting leaves',\n      error: error.message,\n    });\n  }\n};\n\nexport const LeaveUpdate = (req, res) => {\n  let { _id } = req.body;\n  let edited = Date.now();\n  Leave.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n        edited,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const NewDepartment = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    Department.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating dept',\n          error: err.message,\n        });\n      });\n  } else {\n    Department.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Dept',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const FetchDepartment = (req, res) => {\n  Department.find({ schoolId: req.user.schoolId })\n    .then(dept => res.json(dept))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const CategoryUpdate = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    LeaveCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    LeaveCategory.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetLeaveCategory = (req, res) => {\n  LeaveCategory.find({ schoolId: req.user.schoolId })\n    .then(leave => res.json(leave))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddUserCategory = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    UserCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    UserCategory.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetUserCategory = (req, res) => {\n  UserCategory.find({ schoolId: req.user.schoolId })\n    .sort('userType')\n    .then(data => res.json(data))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddPayHead = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    PayHead.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating PayHead',\n          error: err.message,\n        });\n      });\n  } else {\n    PayHead.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Pay Head',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetPayHead = (req, res) => {\n  PayHead.find({ schoolId: req.user.schoolId })\n    .then(data => res.json(data))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Pay Roll Details',\n        error: err.message,\n      });\n    });\n};\n\nexport const EditSchool = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    School.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating School',\n          error: err.message,\n        });\n      });\n  } else {\n    res.status(500).json({\n      message: 'Error updating School',\n      error: err.message,\n    });\n  }\n};\n\nexport const UploadFile = async (req, res) => {\n  if (!req.file) {\n    return res.send({\n      success: false,\n    });\n  } else {\n    return fs.readFile(\n      req.file.path,\n      await function(err, data) {\n        http\n          .createServer(function(req, res) {\n            res.writeHead(200, { 'Content-Type': 'image/*' });\n            res.end(data); // Send the file data to the browser.\n          })\n          .listen(8124);\n        upload(data, req.file.filename)\n          .then(response => {\n            getImg(response.path_display)\n              .then(data => {\n                res.json({ response, data });\n              })\n              .catch(err => {\n                res.status(500).json({\n                  message: 'Error Uploading Logo',\n                  error: err.message,\n                });\n              });\n          })\n          .catch(err => {\n            res.status(500).json({\n              message: 'Error Uploading Logo',\n              error: err.message,\n            });\n          });\n      }\n    );\n  }\n};\n\nconst dbx = new Dropbox({\n  accessToken: 'k8Ho1ZfoarAAAAAAAAAACXwiV_26nZURhcclrTo2j0eR7NqFNDFre1K4Qr-6D5KE',\n});\n\nconst upload = (data, path) => {\n  return new Promise((resolve, reject) => {\n    dbx\n      .filesUpload({ autorename: true, path: '/logos/' + path + '.jpeg', contents: data })\n      .then(response => {\n        resolve(response);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const getImg = path => {\n  return new Promise((resolve, reject) => {\n    dbx\n      .filesGetTemporaryLink({ path })\n      .then(response => {\n        resolve(response.link);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const LibraryCategoryUpdate = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    LibraryCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating',\n          error: err.message,\n        });\n      });\n  } else {\n    LibraryCategory.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetLibraryCategory = (req, res) => {\n  LibraryCategory.find({ schoolId: req.user.schoolId })\n    .then(data => res.json(data))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateSchool = (req, res) => {\n  let { _id } = req.body;\n  School.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(school => {\n      res.json(school);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const GetUserDetails = async (req, res) => {\n  let userType = req.body.userType;\n  let id = req.body.sid;\n\n  try {\n    console.log('Getting User details of ' + userType + id);\n    let User =\n      userType === 'teacher'\n        ? Teacher\n        : userType === 'student' ? Student : userType === 'admin' ? Admin : Teacher;\n    let [userData, schoolData] = await Promise.all([\n      User.findOne({\n        sid: id,\n      }),\n      School.findOne({\n        schoolId: req.user.schoolId,\n      }),\n    ]);\n    return res.json({\n      userData,\n      schoolData,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching details',\n      error: err.message,\n    });\n  }\n};\n\nexport const UploadUserDetails = async (req, res) => {\n  let userType = req.body.userType;\n  let id = req.body.sid;\n\n  try {\n    console.log('Getting User details of ' + userType + id);\n    let User =\n      userType === 'teacher'\n        ? Teacher\n        : userType === 'student' ? Student : userType === 'admin' ? Admin : Teacher;\n    let [userData, schoolData] = await Promise.all([\n      User.findOneAndUpdate(\n        {\n          sid: id,\n        },\n        {\n          $set: {\n            ...req.body,\n          },\n        },\n        {\n          new: true,\n        }\n      ),\n      School.findOne({\n        schoolId: req.user.schoolId,\n      }),\n    ]);\n    return res.json({\n      userData,\n      schoolData,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Updating User details',\n      error: err.message,\n    });\n  }\n};\n"]}