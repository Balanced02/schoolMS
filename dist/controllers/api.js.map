{"version":3,"sources":["../../server/controllers/api.js"],"names":["CreateNotice","req","res","body","date","create","then","json","notice","catch","status","message","error","err","AllCourse","Promise","all","find","sort","count","courses","SummaryData","accepted","totalStudents","pendingReg","totalStaff","noticeBoard","CreateCourse","courseName","courseCode","minAttendance","description","course","UpdateCourse","_id","findOneAndUpdate","$set","new","VisitorData","newVisitor","visitor","updateVisitor","resolve","reject","data","id","GetVisitors","limit","visitors","GetTeachers","teachers","map","assignedClass","filter","teacher","fullName","d","a","classTitle","join","_doc","classInfo","AllClass","AddClass","UpdateClass","LeaveApplication","leave","GetLeave","params","searchQuery","teacherId","user","sid","leaves","teacherName","console","log","LeaveUpdate","edited","Date","now","NewDepartment","dept","FetchDepartment","CategoryUpdate","GetLeaveCategory","AddUserCategory","GetUserCategory"],"mappings":"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","file":"api.js","sourcesContent":["import regeneratorRuntime from 'regenerator-runtime';\nimport Notice from '../models/Notice';\nimport Student from '../models/Student';\nimport Users from '../models/Users';\nimport Course from '../models/Course';\nimport Visitor from '../models/Visitor';\nimport Teacher from '../models/Teacher';\nimport ClassDetails from '../models/ClassDetails';\nimport Leave from '../models/Leave';\nimport Department from '../models/Department';\nimport LeaveCategory from '../models/LeaveCategory';\nimport UserCategory from '../models/UserCategory';\n\nexport const CreateNotice = (req, res) => {\n  let { date, body } = req.body;\n  Notice.create({\n    date,\n    body,\n  })\n    .then(notice => {\n      res.json(notice);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Loading Clients',\n        error: err.message,\n      });\n    });\n};\n\nexport const AllCourse = async (req, res) => {\n  try {\n    let [courses, count] = await Promise.all([Course.find().sort('date'), Course.find().count()]);\n    return res.json({\n      courses,\n      count,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const SummaryData = async (req, res) => {\n  try {\n    let [totalStudents, pendingReg, totalStaff, noticeBoard] = await Promise.all([\n      Student.find().count(),\n      Student.find({ accepted: true }).count(),\n      Users.find().count(),\n      Notice.find().sort('-created'),\n    ]);\n    return res.json({\n      totalStudents,\n      pendingReg,\n      totalStaff,\n      noticeBoard,\n    });\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error Loading Clients',\n      error: err.message,\n    });\n  }\n};\n\nexport const CreateCourse = (req, res) => {\n  let { courseName, courseCode, minAttendance, description } = req.body;\n  Course.create({ courseName, courseCode, minAttendance, description })\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateCourse = (req, res) => {\n  let { _id, courseName, courseCode, minAttendance, description } = req.body;\n  Course.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const VisitorData = (req, res) => {\n  !req.body._id\n    ? newVisitor(req.body)\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        })\n    : updateVisitor()\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        });\n};\n\nconst newVisitor = data => {\n  return new Promise((resolve, reject) => {\n    Visitor.create({ ...data })\n      .then(visitor => {\n        resolve(visitor);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nconst updateVisitor = data => {\n  let id = data._id;\n  return new Promise((resolve, reject) => {\n    Visitor.findOneAndUpdate(\n      { id: data._id },\n      {\n        $set: {\n          ...data,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(visitor => resolve(visitor))\n      .catch(err => reject(err));\n  });\n};\n\nexport const GetVisitors = async (req, res) => {\n  try {\n    let [visitors, count] = await Promise.all([\n      Visitor.find()\n        .sort('-timeIn')\n        .limit(50),\n      Visitor.find().count(),\n    ]);\n    return res.json({\n      visitors,\n      count,\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetTeachers = async (req, res) => {\n  try {\n    let [teachers, count] = await Promise.all([Teacher.find(), Teacher.find().count()]);\n    let data = await ClassDetails.find({}, 'teacher classTitle');\n    teachers = teachers.map(teacher => {\n      let assignedClass = data\n        .filter(d => teacher.fullName === d.teacher)\n        .map(a => a.classTitle)\n        .join(', ');\n      teacher._doc.classInfo = assignedClass ? assignedClass : '';\n      return teacher;\n    });\n    res.json({ teachers });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Loading Teacher Details',\n      error: err.message,\n    });\n  }\n};\n\nexport const AllClass = (req, res) => {\n  ClassDetails.find()\n    .sort('classTitle')\n    .then(data => {\n      res.json({\n        data,\n      });\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error fetching class information',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddClass = (req, res) => {\n  ClassDetails.create({ ...req.body })\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Class',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateClass = (req, res) => {\n  let { _id } = req.body;\n  ClassDetails.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Class',\n        error: err.message,\n      });\n    });\n};\n\nexport const LeaveApplication = (req, res) => {\n  Leave.create({ ...req.body })\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error creating leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const GetLeave = async (req, res) => {\n  let id = req.params.id;\n  let searchQuery = {};\n  if (id !== 'admin') {\n    searchQuery = {\n      teacherId: req.user.sid,\n    };\n  }\n\n  try {\n    let [leaves, count] = await Promise.all([\n      Leave.find(searchQuery).sort('-status'),\n      Leave.find(searchQuery).count(),\n    ]);\n    let data = await Teacher.find({}, 'sid fullName');\n    leaves = leaves.map(leave => {\n      let teacherName = data.filter(d => leave.teacherId === d.sid)[0];\n      leave._doc.teacherName = teacherName ? teacherName.fullName : '';\n      return leave;\n    });\n    res.json(leaves);\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({\n      message: 'Error getting leaves',\n      error: error.message,\n    });\n  }\n};\n\nexport const LeaveUpdate = (req, res) => {\n  let { _id } = req.body;\n  let edited = Date.now();\n  Leave.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n        edited,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      console.log(err);\n      res.status(500).json({\n        message: 'Error Updating Leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const NewDepartment = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    Department.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        console.log(err);\n        res.status(500).json({\n          message: 'Error updating dept',\n          error: err.message,\n        });\n      });\n  } else {\n    Department.create({\n      ...req.body,\n    })\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Dept',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const FetchDepartment = (req, res) => {\n  Department.find()\n    .then(dept => res.json(dept))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const CategoryUpdate = (req, res) => {\n  console.log(req.body);\n  let { _id } = req.body;\n  if (_id) {\n    LeaveCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        console.log(err);\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    LeaveCategory.create({\n      ...req.body,\n    })\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        console.log(err);\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetLeaveCategory = (req, res) => {\n  LeaveCategory.find()\n    .then(leave => res.json(leave))\n    .catch(err => {\n      console.log(err);\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddUserCategory = (req, res) => {\n  console.log(req.body);\n  let { _id } = req.body;\n  if (_id) {\n    UserCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        console.log(err);\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    UserCategory.create({\n      ...req.body,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        console.log(err);\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetUserCategory = (req, res) => {\n  UserCategory.find()\n    .then(data => res.json(data))\n    .catch(err => {\n      console.log(err);\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n"]}