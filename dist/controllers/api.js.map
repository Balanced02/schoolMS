{"version":3,"sources":["../../server/controllers/api.js"],"names":["GetOtNotes","request","response","noteModel","find","load","error","result","status","send","CreateNotice","req","res","body","date","create","schoolId","user","then","json","notice","catch","message","err","CreateNote","note","AllCourse","Promise","all","sort","count","courses","GetNotes","notes","console","log","GetStudentGatePass","studentGatePasses","sid","$in","map","s","staffId","staffNames","staffName","filter","staff","gatePass","_doc","employeeName","username","GetStudentCategory","limit","categories","GetSchools","schools","userModules","uModule","school","module","SummaryData","accepted","totalStudents","pendingReg","totalStaff","noticeBoard","CreateCourse","courseName","courseCode","minAttendance","description","course","UpdateCourse","_id","findOneAndUpdate","$set","new","VisitorData","newVisitor","visitor","updateVisitor","resolve","reject","data","id","GetVisitors","visitors","GetTeachers","teachers","assignedClass","teacher","fullName","d","a","classTitle","join","classInfo","AllClass","AddClass","CreateStudentGatePass","studentGatePass","CreateStudentCategory","category","StudentCategory","DeleteStudentGatePass","gatePassID","findOneAndRemove","UpdateClass","LeaveApplication","teacherId","leave","GetLeave","params","searchQuery","leaves","teacherName","LeaveUpdate","edited","Date","now","NewDepartment","dept","FetchDepartment","CategoryUpdate","GetLeaveCategory","AddUserCategory","GetUserCategory","AddPayHead","GetPayHead","EditSchool","UploadFile","file","success","path","createServer","writeHead","end","listen","upload","filename","getImg","path_display","readFile","dbx","accessToken","filesUpload","autorename","contents","filesGetTemporaryLink","link","LibraryCategoryUpdate","GetLibraryCategory","UpdateSchool","GetUserDetails","userType","User","findOne","userData","schoolData","UploadUserDetails","GetAcademicDetails","AcademicDetailsUpdate","UpdateUserModule","updateMany"],"mappings":"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","file":"api.js","sourcesContent":["import regeneratorRuntime from 'regenerator-runtime';\n\nimport Dropbox from 'dropbox';\nimport multer from 'multer';\nimport crypto from 'crypto';\nimport fs from 'fs';\nimport http from 'http';\n\nimport Notice from '../models/Notice';\nimport Note from '../models/Note';\nimport Student from '../models/Student';\nimport Users from '../models/Users';\nimport Course from '../models/Course';\nimport Visitor from '../models/Visitor';\nimport Teacher from '../models/Teacher';\nimport Admin from '../models/Admin';\nimport ClassDetails from '../models/ClassDetails';\nimport Leave from '../models/Leave';\nimport Department from '../models/Department';\nimport LeaveCategory from '../models/LeaveCategory';\nimport UserCategory from '../models/UserCategory';\nimport PayHead from '../models/PayHead';\nimport School from '../models/School';\nimport LibraryCategory from '../models/LibraryCategory';\nimport studentGatePass from '../models/studentGatePass';\nimport StudentCategory from '../models/StudentCategory';\nimport AcademicDetails from '../models/AcademicDetails';\n// import noteModel from '../../ottoman_models/Note';\n\n\nimport { resolve } from 'url';\n\nexport const GetOtNotes = async (request, response) => {\n  noteModel.find({}, {load: [\"body\"]}, function(error, result) {\n            if(error) {\n                return response.status(401).send({ \"success\": false, \"message\": error});\n            }\n            response.send(result);\n        });\n};\n\n\nexport const CreateNotice = (req, res) => {\n  let { date, body } = req.body;\n  Notice.create({\n    date,\n    body,\n    schoolId: req.user.schoolId,\n  })\n    .then(notice => {\n      res.json(notice);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Loading Clients',\n        error: err.message,\n      });\n    });\n};\n\n// For creating the notes component\nexport const CreateNote = (req, res) => {\n  let { date, body } = req.body;\n  Note.create({\n    body,\n    schoolId: req.user.schoolId,\n  })\n    .then(note => {\n      res.json(note);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error loading clients',\n        error: err.message,\n      });\n    });\n};\n\nexport const AllCourse = async (req, res) => {\n  try {\n    let [courses, count] = await Promise.all([\n      Course.find({\n        schoolId: req.user.schoolId,\n      }).sort('date'),\n      Course.find({\n        schoolId: req.user.schoolId,\n      }).count(),\n    ]);\n    return res.json({\n      courses,\n      count,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetNotes = async (req, res) => {\n  try {\n    let [notes, count] = await Promise.all([\n      Note.find({\n        schoolId: req.user.schoolId,\n      }).sort('created'),\n      Note.find({\n        schoolId: req.user.schoolId,\n      }).count(),\n    ]);\n    return res.json({\n      notes,\n      count,\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Error fetching Notes',\n      error: err.message,\n    });\n  }\n};\n\n// Get the list of all gate passes issued in a tabular format\n\nexport const GetStudentGatePass = async (req, res) => {\n  try {\n    let [studentGatePasses, count] = await Promise.all([\n      studentGatePass\n        .find({\n          schoolId: req.user.schoolId,\n        })\n        .sort('created'),\n      studentGatePass\n        .find({\n          schoolId: req.user.schoolId,\n        })\n        .count(),\n    ]);\n    let staffNames = await Users.find(\n      {\n        sid: {\n          $in: studentGatePasses.map(s => s.staffId),\n        },\n      },\n      'username sid'\n    );\n    studentGatePasses = studentGatePasses.map(gatePass => {\n      let staffName = staffNames.filter(staff => staff.sid === gatePass.sid)[0];\n      gatePass._doc.employeeName = staffName ? staffName.username : 'Admin';\n      return gatePass;\n    });\n    return res.json({\n      studentGatePasses,\n      count,\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Error fetching Gate Pass',\n      error: err.message,\n    });\n  }\n};\n\n// Get a list of all the student Categories\nexport const GetStudentCategory = async (req, res) => {\n  try {\n    let [count, categories] = await Promise.all([\n      StudentCategory.find().count(),\n      StudentCategory.find()\n        .sort('created')\n        .limit(25),\n    ]);\n    return res.json({\n      count,\n      categories,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error getting categories',\n      error: err.message,\n    });\n  }\n};\n\n\nexport const GetSchools = async (req, res) => {\n  try {\n    let [count, schools] = await Promise.all([\n      School.find().count(),\n      School.find()\n        .sort('-created')\n        .limit(25),\n    ]);\n\n    let userModules = await Users.find(\n      {\n        schoolId: {\n          $in: schools.map(s => s.schoolId),\n        },\n      },\n      'schoolId module'\n    );\n\n    schools = schools.map(school => {\n      let uModule = userModules.filter(user => user.schoolId === school.schoolId)[0];\n      school._doc.module = uModule ? uModule.module : '';\n      return school;\n    });\n\n    return res.json({\n      count,\n      schools,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Loading Schools',\n      error: err.message,\n    });\n  }\n};\n\nexport const SummaryData = async (req, res) => {\n  try {\n    let [totalStudents, pendingReg, totalStaff, noticeBoard, notes] = await Promise.all([\n      Student.find({ schoolId: req.user.schoolId }).count(),\n      Student.find({ accepted: true, schoolId: req.user.schoolId }).count(),\n      Users.find({ schoolId: req.user.schoolId }).count(),\n      Notice.find({ schoolId: req.user.schoolId }).sort('-created'),\n      Note.find({ schoolId: req.user.schoolId }).sort('-created'),\n    ]);\n    return res.json({\n      totalStudents,\n      pendingReg,\n      totalStaff,\n      noticeBoard,\n      notes,\n    });\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error Loading Clients',\n      error: err.message,\n    });\n  }\n};\n\nexport const CreateCourse = (req, res) => {\n  let { courseName, courseCode, minAttendance, description } = req.body;\n  Course.create({\n    courseName,\n    courseCode,\n    minAttendance,\n    description,\n    schoolId: req.user.schoolId,\n  })\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateCourse = (req, res) => {\n  let { _id, courseName, courseCode, minAttendance, description } = req.body;\n  Course.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const VisitorData = (req, res) => {\n  !req.body._id\n    ? newVisitor({ ...req.body, schoolId: req.user.schoolId })\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        })\n    : updateVisitor()\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        });\n};\n\nconst newVisitor = data => {\n  return new Promise((resolve, reject) => {\n    Visitor.create({ ...data })\n      .then(visitor => {\n        resolve(visitor);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nconst updateVisitor = data => {\n  let id = data._id;\n  return new Promise((resolve, reject) => {\n    Visitor.findOneAndUpdate(\n      { id: data._id },\n      {\n        $set: {\n          ...data,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(visitor => resolve(visitor))\n      .catch(err => reject(err));\n  });\n};\n\nexport const GetVisitors = async (req, res) => {\n  try {\n    let [visitors, count] = await Promise.all([\n      Visitor.find({ schoolId: req.user.schoolId })\n        .sort('-timeIn')\n        .limit(50),\n      Visitor.find({ schoolId: req.user.schoolId }).count(),\n    ]);\n    return res.json({\n      visitors,\n      count,\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetTeachers = async (req, res) => {\n  try {\n    let [teachers, count] = await Promise.all([\n      Teacher.find({ schoolId: req.user.schoolId }),\n      Teacher.find({ schoolId: req.user.schoolId }).count(),\n    ]);\n    let data = await ClassDetails.find({ schoolId: req.user.schoolId }, 'teacher classTitle');\n    teachers = teachers.map(teacher => {\n      let assignedClass = data\n        .filter(d => teacher.fullName === d.teacher)\n        .map(a => a.classTitle)\n        .join(', ');\n      teacher._doc.classInfo = assignedClass ? assignedClass : '';\n      return teacher;\n    });\n    res.json({ teachers });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Loading Teacher Details',\n      error: err.message,\n    });\n  }\n};\n\nexport const AllClass = (req, res) => {\n  ClassDetails.find({ schoolId: req.user.schoolId })\n    .sort('classTitle')\n    .then(data => {\n      res.json({\n        data,\n      });\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error fetching class information',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddClass = (req, res) => {\n  ClassDetails.create({ ...req.body, schoolId: req.user.schoolId })\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Class',\n        error: err.message,\n      });\n    });\n};\n\n// Creating the gate pass function , mimicing the create course function\n\nexport const CreateStudentGatePass = (req, res) => {\n  console.log(req.user);\n  studentGatePass\n    .create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n      staffId: req.user.sid,\n    })\n    .then(studentGatePass => {\n      res.json(studentGatePass);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Gate Pass',\n        error: err.message,\n      });\n    });\n};\n\n//Create the Student Category\nexport const CreateStudentCategory = (req, res) => {\n  let { category } = req.body;\n  StudentCategory.create({ category, schoolId: req.user.schoolId })\n    .then(StudentCategory => {\n      res.json(StudentCategory);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error creating Student Category',\n        error: err.message,\n      });\n    });\n};\n\n// Function to delete the Students Gate Pass\n\nexport const DeleteStudentGatePass = (req, res) => {\n  let { gatePassID } = req.body;\n  studentGatePass.findOneAndRemove({ gatePassID }).catch(err => {\n    //if there is any error deleting the data\n    res.status(500).json({\n      message: 'Unable to delete the Pass',\n      error: err.message,\n    });\n  });\n};\n\n\nexport const UpdateClass = (req, res) => {\n  let { _id } = req.body;\n  ClassDetails.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Class',\n        error: err.message,\n      });\n    });\n};\n\nexport const LeaveApplication = (req, res) => {\n  Leave.create({\n    ...req.body,\n    schoolId: req.user.schoolId,\n    teacherId: req.user.sid,\n  })\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error creating leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const GetLeave = async (req, res) => {\n  let id = req.params.id;\n\n  let searchQuery = { schoolId: req.user.schoolId };\n  if (id !== 'admin') {\n    searchQuery = {\n      teacherId: id,\n    };\n  }\n  try {\n    let [leaves, count] = await Promise.all([\n      Leave.find(searchQuery).sort('-status'),\n      Leave.find(searchQuery).count(),\n    ]);\n\n    let data = await Teacher.find({ schoolId: req.user.schoolId }, 'sid fullName');\n    leaves = leaves.map(leave => {\n      let teacherName = data.filter(d => leave.teacherId === d.sid)[0];\n      leave._doc.teacherName = teacherName ? teacherName.fullName : '';\n      return leave;\n    });\n    res.json(leaves);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error getting leaves',\n      error: error.message,\n    });\n  }\n};\n\nexport const LeaveUpdate = (req, res) => {\n  let { _id } = req.body;\n  let edited = Date.now();\n  Leave.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n        edited,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const NewDepartment = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    Department.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating dept',\n          error: err.message,\n        });\n      });\n  } else {\n    Department.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Dept',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const FetchDepartment = (req, res) => {\n  Department.find({ schoolId: req.user.schoolId })\n    .then(dept => res.json(dept))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const CategoryUpdate = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    LeaveCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    LeaveCategory.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetLeaveCategory = (req, res) => {\n  LeaveCategory.find({ schoolId: req.user.schoolId })\n    .then(leave => res.json(leave))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddUserCategory = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    UserCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    UserCategory.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetUserCategory = (req, res) => {\n  UserCategory.find({ schoolId: req.user.schoolId })\n    .sort('userType')\n    .then(data => res.json(data))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddPayHead = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    PayHead.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating PayHead',\n          error: err.message,\n        });\n      });\n  } else {\n    PayHead.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Pay Head',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetPayHead = (req, res) => {\n  PayHead.find({ schoolId: req.user.schoolId })\n    .then(data => res.json(data))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Pay Roll Details',\n        error: err.message,\n      });\n    });\n};\n\nexport const EditSchool = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    School.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating School',\n          error: err.message,\n        });\n      });\n  } else {\n    res.status(500).json({\n      message: 'Error updating School',\n      error: err.message,\n    });\n  }\n};\n\nexport const UploadFile = async (req, res) => {\n  if (!req.file) {\n    return res.send({\n      success: false,\n    });\n  } else {\n    return fs.readFile(\n      req.file.path,\n      await function(err, data) {\n        http\n          .createServer(function(req, res) {\n            res.writeHead(200, { 'Content-Type': 'image/*' });\n            res.end(data); // Send the file data to the browser.\n          })\n          .listen(8124);\n        upload(data, req.file.filename)\n          .then(response => {\n            getImg(response.path_display)\n              .then(data => {\n                res.json({ response, data });\n              })\n              .catch(err => {\n                res.status(500).json({\n                  message: 'Error Uploading Logo',\n                  error: err.message,\n                });\n              });\n          })\n          .catch(err => {\n            res.status(500).json({\n              message: 'Error Uploading Logo',\n              error: err.message,\n            });\n          });\n      }\n    );\n  }\n};\n\nconst dbx = new Dropbox({\n  accessToken: 'k8Ho1ZfoarAAAAAAAAAACXwiV_26nZURhcclrTo2j0eR7NqFNDFre1K4Qr-6D5KE',\n});\n\nconst upload = (data, path) => {\n  return new Promise((resolve, reject) => {\n    dbx\n      .filesUpload({\n        autorename: true,\n        path: '/logos/' + path + '.jpeg',\n        contents: data,\n      })\n      .then(response => {\n        resolve(response);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const getImg = path => {\n  return new Promise((resolve, reject) => {\n    dbx\n      .filesGetTemporaryLink({ path })\n      .then(response => {\n        resolve(response.link);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const LibraryCategoryUpdate = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    LibraryCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating',\n          error: err.message,\n        });\n      });\n  } else {\n    LibraryCategory.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetLibraryCategory = (req, res) => {\n  LibraryCategory.find({ schoolId: req.user.schoolId })\n    .then(data => res.json(data))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\n \n\n\nexport const UpdateSchool = (req, res) => {\n  let { _id } = req.body;\n  School.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(school => {\n      res.json(school);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const GetUserDetails = async (req, res) => {\n  let userType = req.body.userType;\n  let id = req.body.sid;\n\n  try {\n    console.log('Getting User details of ' + userType + id);\n    let User =\n      userType === 'teacher'\n        ? Teacher\n        : userType === 'student' ? Student : userType === 'admin' ? Admin : Teacher;\n    let [userData, schoolData] = await Promise.all([\n      User.findOne({\n        sid: id,\n      }),\n      School.findOne({\n        schoolId: req.user.schoolId,\n      }),\n    ]);\n    return res.json({\n      userData,\n      schoolData,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching details',\n      error: err.message,\n    });\n  }\n};\n\nexport const UploadUserDetails = async (req, res) => {\n  let userType = req.body.userType;\n  let id = req.body.sid;\n\n  try {\n    console.log('Getting User details of ' + userType + id);\n    let User =\n      userType === 'teacher'\n        ? Teacher\n        : userType === 'student' ? Student : userType === 'admin' ? Admin : Teacher;\n    let [userData, schoolData] = await Promise.all([\n      User.findOneAndUpdate(\n        {\n          sid: id,\n        },\n        {\n          $set: {\n            ...req.body,\n          },\n        },\n        {\n          new: true,\n        }\n      ),\n      School.findOne({\n        schoolId: req.user.schoolId,\n      }),\n    ]);\n    return res.json({\n      userData,\n      schoolData,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Updating User details',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetAcademicDetails = (req, res) => {\n  AcademicDetails.find({ schoolId: req.user.schoolId })\n    .then(data => res.json(data))\n    .catch(err => {\n      console.log(err);\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AcademicDetailsUpdate = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    AcademicDetails.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating',\n          error: err.message,\n        });\n      });\n  } else {\n    AcademicDetails.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const UpdateUserModule = (req, res) => {\n  let { schoolId, module } = req.body;\n  Users.updateMany(\n    {\n      schoolId: schoolId,\n    },\n    {\n      $set: {\n        module: module,\n      },\n    }\n  )\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n"]}