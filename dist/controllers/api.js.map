{"version":3,"sources":["../../server/controllers/api.js"],"names":["CreateNotice","req","res","body","date","create","then","json","notice","catch","status","message","error","err","AllCourse","Promise","all","find","sort","count","courses","SummaryData","console","log","accepted","totalStudents","pendingReg","totalStaff","noticeBoard","CreateCourse","courseName","courseCode","minAttendance","description","course","UpdateCourse","_id","findOneAndUpdate","$set","new","VisitorData","newVisitor","visitor","updateVisitor","resolve","reject","data","id","GetVisitors","limit","visitors","GetTeachers","teachers","map","assignedClass","filter","teacher","fullName","d","a","classTitle","join","_doc","classInfo","AllClass","AddClass","UpdateClass"],"mappings":"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","file":"api.js","sourcesContent":["import regeneratorRuntime from 'regenerator-runtime';\nimport Notice from '../models/Notice';\nimport Student from '../models/Student';\nimport Users from '../models/Users';\nimport Course from '../models/Course';\nimport Visitor from '../models/Visitor';\nimport Teacher from '../models/Teacher';\nimport ClassDetails from '../models/ClassDetails';\n\nexport const CreateNotice = (req, res) => {\n  let { date, body } = req.body;\n  Notice.create({\n    date,\n    body,\n  })\n    .then(notice => {\n      res.json(notice);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Loading Clients',\n        error: err.message,\n      });\n    });\n};\n\nexport const AllCourse = async (req, res) => {\n  try {\n    let [courses, count] = await Promise.all([Course.find().sort('date'), Course.find().count()]);\n    return res.json({\n      courses,\n      count,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const SummaryData = async (req, res) => {\n  console.log('Getting Summary');\n  try {\n    let [totalStudents, pendingReg, totalStaff, noticeBoard] = await Promise.all([\n      Student.find().count(),\n      Student.find({ accepted: true }).count(),\n      Users.find().count(),\n      Notice.find().sort('-created'),\n    ]);\n    return res.json({\n      totalStudents,\n      pendingReg,\n      totalStaff,\n      noticeBoard,\n    });\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error Loading Clients',\n      error: err.message,\n    });\n  }\n};\n\nexport const CreateCourse = (req, res) => {\n  let { courseName, courseCode, minAttendance, description } = req.body;\n  Course.create({ courseName, courseCode, minAttendance, description })\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateCourse = (req, res) => {\n  let { _id, courseName, courseCode, minAttendance, description } = req.body;\n  Course.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const VisitorData = (req, res) => {\n  !req.body._id\n    ? newVisitor(req.body)\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        })\n    : updateVisitor()\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        });\n};\n\nconst newVisitor = data => {\n  return new Promise((resolve, reject) => {\n    Visitor.create({ ...data })\n      .then(visitor => {\n        resolve(visitor);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nconst updateVisitor = data => {\n  let id = data._id;\n  return new Promise((resolve, reject) => {\n    Visitor.findOneAndUpdate(\n      { id: data._id },\n      {\n        $set: {\n          ...data,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(visitor => resolve(visitor))\n      .catch(err => reject(err));\n  });\n};\n\nexport const GetVisitors = async (req, res) => {\n  try {\n    let [visitors, count] = await Promise.all([\n      Visitor.find()\n        .sort('-timeIn')\n        .limit(50),\n      Visitor.find().count(),\n    ]);\n    return res.json({\n      visitors,\n      count,\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetTeachers = async (req, res) => {\n  try {\n    let [teachers, count] = await Promise.all([Teacher.find(), Teacher.find().count()]);\n    let data = await ClassDetails.find({}, 'teacher classTitle');\n    console.log(data);\n    teachers = teachers.map(teacher => {\n      let assignedClass = data\n        .filter(d => teacher.fullName === d.teacher)\n        .map(a => a.classTitle)\n        .join(', ');\n      console.log(assignedClass);\n      teacher._doc.classInfo = assignedClass ? assignedClass : '';\n      return teacher;\n    });\n    res.json({ teachers });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Error Loading Teacher Details',\n      error: err.message,\n    });\n  }\n};\n\nexport const AllClass = (req, res) => {\n  ClassDetails.find()\n    .sort('classTitle')\n    .then(data => {\n      console.log(data);\n      res.json({\n        data,\n      });\n    })\n    .catch(err => {\n      console.log(err);\n      res.status(500).json({\n        message: 'Error fetching class information',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddClass = (req, res) => {\n  ClassDetails.create({ ...req.body })\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Class',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateClass = (req, res) => {\n  let { _id } = req.body;\n  ClassDetails.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Class',\n        error: err.message,\n      });\n    });\n};\n"]}