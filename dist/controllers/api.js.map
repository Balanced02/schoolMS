{"version":3,"sources":["../../server/controllers/api.js"],"names":["CreateNotice","req","res","body","date","create","then","json","notice","catch","status","message","error","err","AllCourse","Promise","all","find","sort","count","courses","SummaryData","console","log","user","accepted","totalStudents","pendingReg","totalStaff","noticeBoard","CreateCourse","courseName","courseCode","minAttendance","description","course","UpdateCourse","_id","findOneAndUpdate","$set","new","VisitorData","newVisitor","visitor","updateVisitor","resolve","reject","data","id","GetVisitors","limit","visitors","GetTeachers","teachers","map","assignedClass","filter","teacher","fullName","d","a","classTitle","join","_doc","classInfo","AllClass","AddClass","UpdateClass","LeaveApplication","leave","GetLeave","params","searchQuery","teacherId","sid","leaves","teacherName","LeaveUpdate","edited","Date","now","NewDepartment","dept","FetchDepartment","CategoryUpdate","GetLeaveCategory","AddUserCategory","GetUserCategory","AddPayHead","GetPayHead","EditSchool","GetSchools","UploadFile","file","send","success","path","createServer","writeHead","end","listen","upload","filename","response","path_display","getImg","readFile","dbx","accessToken","filesUpload","autorename","contents","filesGetTemporaryLink","link"],"mappings":"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","file":"api.js","sourcesContent":["import regeneratorRuntime from 'regenerator-runtime';\n\nimport Dropbox from 'dropbox';\nimport multer from 'multer';\nimport crypto from 'crypto';\nimport fs from 'fs';\nimport http from 'http';\n\nimport Notice from '../models/Notice';\nimport Student from '../models/Student';\nimport Users from '../models/Users';\nimport Course from '../models/Course';\nimport Visitor from '../models/Visitor';\nimport Teacher from '../models/Teacher';\nimport ClassDetails from '../models/ClassDetails';\nimport Leave from '../models/Leave';\nimport Department from '../models/Department';\nimport LeaveCategory from '../models/LeaveCategory';\nimport UserCategory from '../models/UserCategory';\nimport PayHead from '../models/PayHead';\nimport School from '../models/School';\nimport { resolve } from 'url';\n\nexport const CreateNotice = (req, res) => {\n  let { date, body } = req.body;\n  Notice.create({\n    date,\n    body,\n  })\n    .then(notice => {\n      res.json(notice);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Loading Clients',\n        error: err.message,\n      });\n    });\n};\n\nexport const AllCourse = async (req, res) => {\n  try {\n    let [courses, count] = await Promise.all([Course.find().sort('date'), Course.find().count()]);\n    return res.json({\n      courses,\n      count,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const SummaryData = async (req, res) => {\n  console.log(req.user);\n  try {\n    let [totalStudents, pendingReg, totalStaff, noticeBoard] = await Promise.all([\n      Student.find().count(),\n      Student.find({ accepted: true }).count(),\n      Users.find().count(),\n      Notice.find().sort('-created'),\n    ]);\n    return res.json({\n      totalStudents,\n      pendingReg,\n      totalStaff,\n      noticeBoard,\n    });\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error Loading Clients',\n      error: err.message,\n    });\n  }\n};\n\nexport const CreateCourse = (req, res) => {\n  let { courseName, courseCode, minAttendance, description } = req.body;\n  Course.create({ courseName, courseCode, minAttendance, description })\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateCourse = (req, res) => {\n  let { _id, courseName, courseCode, minAttendance, description } = req.body;\n  Course.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const VisitorData = (req, res) => {\n  !req.body._id\n    ? newVisitor(req.body)\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        })\n    : updateVisitor()\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        });\n};\n\nconst newVisitor = data => {\n  return new Promise((resolve, reject) => {\n    Visitor.create({ ...data })\n      .then(visitor => {\n        resolve(visitor);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nconst updateVisitor = data => {\n  let id = data._id;\n  return new Promise((resolve, reject) => {\n    Visitor.findOneAndUpdate(\n      { id: data._id },\n      {\n        $set: {\n          ...data,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(visitor => resolve(visitor))\n      .catch(err => reject(err));\n  });\n};\n\nexport const GetVisitors = async (req, res) => {\n  try {\n    let [visitors, count] = await Promise.all([\n      Visitor.find()\n        .sort('-timeIn')\n        .limit(50),\n      Visitor.find().count(),\n    ]);\n    return res.json({\n      visitors,\n      count,\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetTeachers = async (req, res) => {\n  try {\n    let [teachers, count] = await Promise.all([Teacher.find(), Teacher.find().count()]);\n    let data = await ClassDetails.find({}, 'teacher classTitle');\n    teachers = teachers.map(teacher => {\n      let assignedClass = data\n        .filter(d => teacher.fullName === d.teacher)\n        .map(a => a.classTitle)\n        .join(', ');\n      teacher._doc.classInfo = assignedClass ? assignedClass : '';\n      return teacher;\n    });\n    res.json({ teachers });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Loading Teacher Details',\n      error: err.message,\n    });\n  }\n};\n\nexport const AllClass = (req, res) => {\n  ClassDetails.find()\n    .sort('classTitle')\n    .then(data => {\n      res.json({\n        data,\n      });\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error fetching class information',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddClass = (req, res) => {\n  ClassDetails.create({ ...req.body })\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Class',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateClass = (req, res) => {\n  let { _id } = req.body;\n  ClassDetails.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Class',\n        error: err.message,\n      });\n    });\n};\n\nexport const LeaveApplication = (req, res) => {\n  Leave.create({ ...req.body })\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error creating leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const GetLeave = async (req, res) => {\n  let id = req.params.id;\n  let searchQuery = {};\n  if (id !== 'admin') {\n    searchQuery = {\n      teacherId: req.user.sid,\n    };\n  }\n\n  try {\n    let [leaves, count] = await Promise.all([\n      Leave.find(searchQuery).sort('-status'),\n      Leave.find(searchQuery).count(),\n    ]);\n    let data = await Teacher.find({}, 'sid fullName');\n    leaves = leaves.map(leave => {\n      let teacherName = data.filter(d => leave.teacherId === d.sid)[0];\n      leave._doc.teacherName = teacherName ? teacherName.fullName : '';\n      return leave;\n    });\n    res.json(leaves);\n  } catch (error) {\n    // console.log(error);\n    res.status(500).json({\n      message: 'Error getting leaves',\n      error: error.message,\n    });\n  }\n};\n\nexport const LeaveUpdate = (req, res) => {\n  let { _id } = req.body;\n  let edited = Date.now();\n  Leave.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n        edited,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      // console.log(err);\n      res.status(500).json({\n        message: 'Error Updating Leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const NewDepartment = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    Department.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        // console.log(err);\n        res.status(500).json({\n          message: 'Error updating dept',\n          error: err.message,\n        });\n      });\n  } else {\n    Department.create({\n      ...req.body,\n    })\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Dept',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const FetchDepartment = (req, res) => {\n  Department.find()\n    .then(dept => res.json(dept))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const CategoryUpdate = (req, res) => {\n  // console.log(req.body);\n  let { _id } = req.body;\n  if (_id) {\n    LeaveCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        // console.log(err);\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    LeaveCategory.create({\n      ...req.body,\n    })\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        // console.log(err);\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetLeaveCategory = (req, res) => {\n  LeaveCategory.find()\n    .then(leave => res.json(leave))\n    .catch(err => {\n      // console.log(err);\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddUserCategory = (req, res) => {\n  // console.log(req.body);\n  let { _id } = req.body;\n  if (_id) {\n    UserCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        // console.log(err);\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    UserCategory.create({\n      ...req.body,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        // console.log(err);\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetUserCategory = (req, res) => {\n  UserCategory.find()\n    .sort('userType')\n    .then(data => res.json(data))\n    .catch(err => {\n      // console.log(err);\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddPayHead = (req, res) => {\n  // console.log(req.body);\n  let { _id } = req.body;\n  if (_id) {\n    PayHead.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        // console.log(err);\n        res.status(500).json({\n          message: 'Error updating PayHead',\n          error: err.message,\n        });\n      });\n  } else {\n    PayHead.create({\n      ...req.body,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        // console.log(err);\n        res.status(500).json({\n          message: 'Error Creating Pay Head',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetPayHead = (req, res) => {\n  PayHead.find()\n    .then(data => res.json(data))\n    .catch(err => {\n      // console.log(err);\n      res.status(500).json({\n        message: 'Error Fetching Pay Roll Details',\n        error: err.message,\n      });\n    });\n};\n\nexport const EditSchool = (req, res) => {\n  // console.log(req.body);\n  let { _id } = req.body;\n  if (_id) {\n    School.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        // console.log(err);\n        res.status(500).json({\n          message: 'Error updating School',\n          error: err.message,\n        });\n      });\n  } else {\n    res.status(500).json({\n      message: 'Error updating School',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetSchools = (req, res) => {\n  School.find()\n    .then(data => res.json(data))\n    .catch(err => {\n      // console.log(err);\n      res.status(500).json({\n        message: 'Error Fetching School Details',\n        error: err.message,\n      });\n    });\n};\n\nexport const UploadFile = async (req, res) => {\n  if (!req.file) {\n    console.log('No file received');\n    return res.send({\n      success: false,\n    });\n  } else {\n    console.log(req.file);\n    return fs.readFile(\n      req.file.path,\n      await function(err, data) {\n        if (err) console.log(err);\n        console.log('reading!!!');\n        http\n          .createServer(function(req, res) {\n            res.writeHead(200, { 'Content-Type': 'image/*' });\n            res.end(data); // Send the file data to the browser.\n          })\n          .listen(8124);\n        upload(data, req.file.filename)\n          .then(response => {\n            console.log(response.path_display);\n            getImg(response.path_display)\n              .then(data => {\n                console.log(data);\n                res.json({ response, data });\n              })\n              .catch(err => {\n                console.log(err);\n                res.status(500).json({\n                  message: 'Error Uploading Logo',\n                  error: err.message,\n                });\n              });\n          })\n          .catch(err => {\n            console.log(err);\n            res.status(500).json({\n              message: 'Error Uploading Logo',\n              error: err.message,\n            });\n          });\n      }\n    );\n  }\n};\n\nconst dbx = new Dropbox({\n  accessToken: 'k8Ho1ZfoarAAAAAAAAAACXwiV_26nZURhcclrTo2j0eR7NqFNDFre1K4Qr-6D5KE',\n});\n\nconst upload = (data, path) => {\n  console.log('Uploading!!!');\n  return new Promise((resolve, reject) => {\n    dbx\n      .filesUpload({ autorename: true, path: '/logos/' + path + '.jpeg', contents: data })\n      .then(response => {\n        resolve(response);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nconst getImg = path => {\n  return new Promise((resolve, reject) => {\n    dbx\n      .filesGetTemporaryLink({ path })\n      .then(response => {\n        // console.log(response.link);\n        resolve(response.link);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n"]}