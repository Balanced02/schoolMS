{"version":3,"sources":["../../server/controllers/api.js"],"names":["CreateNotice","req","res","body","date","create","schoolId","user","then","json","notice","catch","status","message","error","err","CreateNote","note","AllCourse","Promise","all","find","sort","count","courses","GetNotes","notes","console","log","GetStudentGatePass","studentGatePasses","GetStudentCategory","limit","categories","GetSchools","schools","SummaryData","accepted","totalStudents","pendingReg","totalStaff","noticeBoard","CreateCourse","courseName","courseCode","minAttendance","description","course","UpdateCourse","_id","findOneAndUpdate","$set","new","VisitorData","newVisitor","visitor","updateVisitor","resolve","reject","data","id","GetVisitors","visitors","GetTeachers","teachers","map","assignedClass","filter","teacher","fullName","d","a","classTitle","join","_doc","classInfo","AllClass","AddClass","CreateStudentGatePass","studentName","contactNumber","personName","issueDate","reason","employeeName","studentGatePass","CreateStudentCategory","category","StudentCategory","DeleteStudentGatePass","gatePassID","findOneAndRemove","UpdateClass","LeaveApplication","teacherId","sid","leave","GetLeave","params","searchQuery","leaves","teacherName","LeaveUpdate","edited","Date","now","NewDepartment","dept","FetchDepartment","CategoryUpdate","GetLeaveCategory","AddUserCategory","GetUserCategory","AddPayHead","GetPayHead","EditSchool","UploadFile","file","send","success","path","createServer","writeHead","end","listen","upload","filename","getImg","response","path_display","readFile","dbx","accessToken","filesUpload","autorename","contents","filesGetTemporaryLink","link","LibraryCategoryUpdate","GetLibraryCategory","UpdateSchool","school","GetUserDetails","userType","User","findOne","userData","schoolData","UploadUserDetails"],"mappings":"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","file":"api.js","sourcesContent":["import regeneratorRuntime from 'regenerator-runtime';\n\nimport Dropbox from 'dropbox';\nimport multer from 'multer';\nimport crypto from 'crypto';\nimport fs from 'fs';\nimport http from 'http';\n\nimport Notice from '../models/Notice';\nimport Note from '../models/Note';\nimport Student from '../models/Student';\nimport Users from '../models/Users';\nimport Course from '../models/Course';\nimport Visitor from '../models/Visitor';\nimport Teacher from '../models/Teacher';\nimport Admin from '../models/Admin';\nimport ClassDetails from '../models/ClassDetails';\nimport Leave from '../models/Leave';\nimport Department from '../models/Department';\nimport LeaveCategory from '../models/LeaveCategory';\nimport UserCategory from '../models/UserCategory';\nimport PayHead from '../models/PayHead';\nimport School from '../models/School';\nimport LibraryCategory from '../models/LibraryCategory';\nimport studentGatePass from '../models/studentGatePass';\nimport StudentCategory from '../models/StudentCategory';\n\nimport { resolve } from 'url';\n\nexport const CreateNotice = (req, res) => {\n  let { date, body } = req.body;\n  Notice.create({\n    date,\n    body,\n    schoolId: req.user.schoolId,\n  })\n    .then(notice => {\n      res.json(notice);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Loading Clients',\n        error: err.message,\n      });\n    });\n};\n\n// For creating the notes component\nexport const CreateNote = (req, res) => {\n  let {date , body} = req.body;\n  Note.create({\n    body,\n    schoolId: req.user.schoolId,\n  })\n  .then(note => {\n    res.json(note);\n  })\n  .catch(err => {\n    res.status(500).json({\n    message: 'Error loading clients',\n    error: err.message,\n    });\n  });\n};\n\n\nexport const AllCourse = async (req, res) => {\n  try {\n    let [courses, count] = await Promise.all([\n      Course.find({\n        schoolId: req.user.schoolId,\n      }).sort('date'),\n      Course.find({\n        schoolId: req.user.schoolId,\n      }).count(),\n    ]);\n    return res.json({\n      courses,\n      count,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\n\nexport const GetNotes = async (req, res) => {\n  try {\n    let [notes,count] = await Promise.all([\n      Note.find({\n        schoolId: req.user.schoolId,\n      }).sort('created'),\n      Note.find({\n        schoolId: req.user.schoolId,\n      }).count(),\n    ]);\n    return res.json({\n      notes,\n      count,\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Error fetching Notes',\n      error: err.message,\n    });\n  }\n};\n\n// Get the list of all gate passes issued in a tabular format\n\nexport const GetStudentGatePass = async (req, res) => {\n  try {\n    let [studentGatePasses,count] = await Promise.all([\n      studentGatePass.find({\n        schoolId: req.user.schoolId,\n      }).sort('created'),\n      studentGatePass.find({\n        schoolId: req.user.schoolId,\n      }).count(),\n    ]);\n    return res.json({\n      studentGatePasses,\n      count,\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(500).json({\n      message: 'Error fetching Gate Pass',\n      error: err.message,\n    });\n  }\n};\n\n\n// Get a list of all the student Categories\nexport const GetStudentCategory = async (req, res) => {\n  try{\n    let [count, categories] =  await Promise.all([\n      StudentCategory.find().count(),\n      StudentCategory.find()\n      .sort('created')\n      .limit(25),\n      ]);\n      return res.json({\n        count,\n        categories,\n      });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error getting categories',\n      error: err.message,\n    });\n  }\n};\n\n\nexport const GetSchools = async (req, res) => {\n  try {\n    let [count, schools] = await Promise.all([\n      School.find().count(),\n      School.find()\n        .sort('-created')\n        .limit(25),\n    ]);\n    return res.json({\n      count,\n      schools,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Loading Schools',\n      error: err.message,\n    });\n  }\n};\n\nexport const SummaryData = async (req, res) => {\n  try {\n    let [totalStudents, pendingReg, totalStaff, noticeBoard, notes] = await Promise.all([\n      Student.find({ schoolId: req.user.schoolId }).count(),\n      Student.find({ accepted: true, schoolId: req.user.schoolId }).count(),\n      Users.find({ schoolId: req.user.schoolId }).count(),\n      Notice.find({ schoolId: req.user.schoolId }).sort('-created'),\n      Note.find({schoolId: req.user.schoolId}).sort('-created'),  \n    ]);\n    return res.json({\n      totalStudents,\n      pendingReg,\n      totalStaff,\n      noticeBoard,\n      notes,\n    });\n  } catch (err) {\n    res.status(400).json({\n      message: 'Error Loading Clients',\n      error: err.message,\n    });\n  }\n};\n\nexport const CreateCourse = (req, res) => {\n  let { courseName, courseCode, minAttendance, description } = req.body;\n  Course.create({ courseName, courseCode, minAttendance, description, schoolId: req.user.schoolId })\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const UpdateCourse = (req, res) => {\n  let { _id, courseName, courseCode, minAttendance, description } = req.body;\n  Course.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(course => {\n      res.json(course);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const VisitorData = (req, res) => {\n  !req.body._id\n    ? newVisitor({ ...req.body, schoolId: req.user.schoolId })\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        })\n    : updateVisitor()\n        .then(visitor => res.json(visitor))\n        .catch(err => {\n          res.status(500).json({\n            message: 'Error Logging Visitor',\n            error: err.message,\n          });\n        });\n};\n\nconst newVisitor = data => {\n  return new Promise((resolve, reject) => {\n    Visitor.create({ ...data })\n      .then(visitor => {\n        resolve(visitor);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nconst updateVisitor = data => {\n  let id = data._id;\n  return new Promise((resolve, reject) => {\n    Visitor.findOneAndUpdate(\n      { id: data._id },\n      {\n        $set: {\n          ...data,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(visitor => resolve(visitor))\n      .catch(err => reject(err));\n  });\n};\n\nexport const GetVisitors = async (req, res) => {\n  try {\n    let [visitors, count] = await Promise.all([\n      Visitor.find({ schoolId: req.user.schoolId })\n        .sort('-timeIn')\n        .limit(50),\n      Visitor.find({ schoolId: req.user.schoolId }).count(),\n    ]);\n    return res.json({\n      visitors,\n      count,\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error fetching courses',\n      error: err.message,\n    });\n  }\n};\n\nexport const GetTeachers = async (req, res) => {\n  try {\n    let [teachers, count] = await Promise.all([\n      Teacher.find({ schoolId: req.user.schoolId }),\n      Teacher.find({ schoolId: req.user.schoolId }).count(),\n    ]);\n    let data = await ClassDetails.find({ schoolId: req.user.schoolId }, 'teacher classTitle');\n    teachers = teachers.map(teacher => {\n      let assignedClass = data\n        .filter(d => teacher.fullName === d.teacher)\n        .map(a => a.classTitle)\n        .join(', ');\n      teacher._doc.classInfo = assignedClass ? assignedClass : '';\n      return teacher;\n    });\n    res.json({ teachers });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Loading Teacher Details',\n      error: err.message,\n    });\n  }\n};\n\nexport const AllClass = (req, res) => {\n  ClassDetails.find({ schoolId: req.user.schoolId })\n    .sort('classTitle')\n    .then(data => {\n      res.json({\n        data,\n      });\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error fetching class information',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddClass = (req, res) => {\n  ClassDetails.create({ ...req.body, schoolId: req.user.schoolId })\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Class',\n        error: err.message,\n      });\n    });\n};\n\n// Creating the gate pass function , mimicing the create course function\n\nexport const CreateStudentGatePass = (req, res) => {\n  let { studentName, contactNumber, personName, issueDate, reason,  employeeName } = req.body;\n  studentGatePass.create({ studentName, contactNumber, personName, issueDate, reason, employeeName , schoolId: req.user.schoolId })\n    .then(studentGatePass => {\n      res.json(studentGatePass);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Creating Gate Pass',\n        error: err.message,\n      });\n    });\n};\n\n//Create the Student Category\n\nexport const CreateStudentCategory = (req, res) => {\n  let {category} = req.body;\n  StudentCategory.create({category , schoolId: req.user.schoolId})\n  .then(StudentCategory => {\n    res.json(StudentCategory);\n    \n  })\n  .catch(err => {\n    res.status(500).json({\n    \n    message: 'Error creating Student Catgory',\n    error:err.message,\n    \n    });\n    \n  });\n};\n\n// Function to delete the Students Gate Pass\n\nexport const DeleteStudentGatePass = (req,res) => {\n  let { gatePassID } = req.body;\n  studentGatePass.findOneAndRemove({gatePassID})\n  .catch( err => {   //if there is any error deleting the data\n    res.status(500).json({\n      message: 'Unable to delete the Pass',\n      error: err.message,\n    });\n  });\n};\n\n\nexport const UpdateClass = (req, res) => {\n  let { _id } = req.body;\n  ClassDetails.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(classInfo => {\n      res.json(classInfo);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Class',\n        error: err.message,\n      });\n    });\n};\n\nexport const LeaveApplication = (req, res) => {\n  Leave.create({ ...req.body, schoolId: req.user.schoolId, teacherId: req.user.sid })\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error creating leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const GetLeave = async (req, res) => {\n  let id = req.params.id;\n\n  let searchQuery = { schoolId: req.user.schoolId };\n  if (id !== 'admin') {\n    searchQuery = {\n      teacherId: id,\n    };\n  }\n  try {\n    let [leaves, count] = await Promise.all([\n      Leave.find(searchQuery).sort('-status'),\n      Leave.find(searchQuery).count(),\n    ]);\n\n    let data = await Teacher.find({ schoolId: req.user.schoolId }, 'sid fullName');\n    leaves = leaves.map(leave => {\n      let teacherName = data.filter(d => leave.teacherId === d.sid)[0];\n      leave._doc.teacherName = teacherName ? teacherName.fullName : '';\n      return leave;\n    });\n    res.json(leaves);\n  } catch (error) {\n    res.status(500).json({\n      message: 'Error getting leaves',\n      error: error.message,\n    });\n  }\n};\n\nexport const LeaveUpdate = (req, res) => {\n  let { _id } = req.body;\n  let edited = Date.now();\n  Leave.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n        edited,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(leave => {\n      res.json(leave);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Leave',\n        error: err.message,\n      });\n    });\n};\n\nexport const NewDepartment = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    Department.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating dept',\n          error: err.message,\n        });\n      });\n  } else {\n    Department.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(dept => {\n        res.json(dept);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Dept',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const FetchDepartment = (req, res) => {\n  Department.find({ schoolId: req.user.schoolId })\n    .then(dept => res.json(dept))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const CategoryUpdate = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    LeaveCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    LeaveCategory.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(leave => {\n        res.json(leave);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetLeaveCategory = (req, res) => {\n  LeaveCategory.find({ schoolId: req.user.schoolId })\n    .then(leave => res.json(leave))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddUserCategory = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    UserCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating leave',\n          error: err.message,\n        });\n      });\n  } else {\n    UserCategory.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Leave',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetUserCategory = (req, res) => {\n  UserCategory.find({ schoolId: req.user.schoolId })\n    .sort('userType')\n    .then(data => res.json(data))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\nexport const AddPayHead = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    PayHead.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating PayHead',\n          error: err.message,\n        });\n      });\n  } else {\n    PayHead.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating Pay Head',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetPayHead = (req, res) => {\n  PayHead.find({ schoolId: req.user.schoolId })\n    .then(data => res.json(data))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Pay Roll Details',\n        error: err.message,\n      });\n    });\n};\n\nexport const EditSchool = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    School.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating School',\n          error: err.message,\n        });\n      });\n  } else {\n    res.status(500).json({\n      message: 'Error updating School',\n      error: err.message,\n    });\n  }\n};\n\nexport const UploadFile = async (req, res) => {\n  if (!req.file) {\n    return res.send({\n      success: false,\n    });\n  } else {\n    return fs.readFile(\n      req.file.path,\n      await function(err, data) {\n        http\n          .createServer(function(req, res) {\n            res.writeHead(200, { 'Content-Type': 'image/*' });\n            res.end(data); // Send the file data to the browser.\n          })\n          .listen(8124);\n        upload(data, req.file.filename)\n          .then(response => {\n            getImg(response.path_display)\n              .then(data => {\n                res.json({ response, data });\n              })\n              .catch(err => {\n                res.status(500).json({\n                  message: 'Error Uploading Logo',\n                  error: err.message,\n                });\n              });\n          })\n          .catch(err => {\n            res.status(500).json({\n              message: 'Error Uploading Logo',\n              error: err.message,\n            });\n          });\n      }\n    );\n  }\n};\n\nconst dbx = new Dropbox({\n  accessToken: 'k8Ho1ZfoarAAAAAAAAAACXwiV_26nZURhcclrTo2j0eR7NqFNDFre1K4Qr-6D5KE',\n});\n\nconst upload = (data, path) => {\n  return new Promise((resolve, reject) => {\n    dbx\n      .filesUpload({ autorename: true, path: '/logos/' + path + '.jpeg', contents: data })\n      .then(response => {\n        resolve(response);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const getImg = path => {\n  return new Promise((resolve, reject) => {\n    dbx\n      .filesGetTemporaryLink({ path })\n      .then(response => {\n        resolve(response.link);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const LibraryCategoryUpdate = (req, res) => {\n  let { _id } = req.body;\n  if (_id) {\n    LibraryCategory.findOneAndUpdate(\n      { _id },\n      {\n        $set: {\n          ...req.body,\n        },\n      },\n      {\n        new: true,\n      }\n    )\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error updating',\n          error: err.message,\n        });\n      });\n  } else {\n    LibraryCategory.create({\n      ...req.body,\n      schoolId: req.user.schoolId,\n    })\n      .then(data => {\n        res.json(data);\n      })\n      .catch(err => {\n        res.status(500).json({\n          message: 'Error Creating',\n          error: err.message,\n        });\n      });\n  }\n};\n\nexport const GetLibraryCategory = (req, res) => {\n  LibraryCategory.find({ schoolId: req.user.schoolId })\n    .then(data => res.json(data))\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Fetching Department',\n        error: err.message,\n      });\n    });\n};\n\n \n\n\nexport const UpdateSchool = (req, res) => {\n  let { _id } = req.body;\n  School.findOneAndUpdate(\n    { _id },\n    {\n      $set: {\n        ...req.body,\n      },\n    },\n    {\n      new: true,\n    }\n  )\n    .then(school => {\n      res.json(school);\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Updating Course',\n        error: err.message,\n      });\n    });\n};\n\nexport const GetUserDetails = async (req, res) => {\n  let userType = req.body.userType;\n  let id = req.body.sid;\n\n  try {\n    console.log('Getting User details of ' + userType + id);\n    let User =\n      userType === 'teacher'\n        ? Teacher\n        : userType === 'student' ? Student : userType === 'admin' ? Admin : Teacher;\n    let [userData, schoolData] = await Promise.all([\n      User.findOne({\n        sid: id,\n      }),\n      School.findOne({\n        schoolId: req.user.schoolId,\n      }),\n    ]);\n    return res.json({\n      userData,\n      schoolData,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching details',\n      error: err.message,\n    });\n  }\n};\n\nexport const UploadUserDetails = async (req, res) => {\n  let userType = req.body.userType;\n  let id = req.body.sid;\n\n  try {\n    console.log('Getting User details of ' + userType + id);\n    let User =\n      userType === 'teacher'\n        ? Teacher\n        : userType === 'student' ? Student : userType === 'admin' ? Admin : Teacher;\n    let [userData, schoolData] = await Promise.all([\n      User.findOneAndUpdate(\n        {\n          sid: id,\n        },\n        {\n          $set: {\n            ...req.body,\n          },\n        },\n        {\n          new: true,\n        }\n      ),\n      School.findOne({\n        schoolId: req.user.schoolId,\n      }),\n    ]);\n    return res.json({\n      userData,\n      schoolData,\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error Updating User details',\n      error: err.message,\n    });\n  }\n};\n"]}