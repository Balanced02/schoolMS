{"version":3,"sources":["../../server/controllers/auth.controller.js"],"names":["RegisterStudent","req","res","body","username","password","name","phone","status","json","message","hash","err","create","then","student","catch","LoginStudent","findOne","compare","result","messgae","console","error"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;AAEO,IAAMA,4CAAkB,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBACDD,IAAIE,IADH;AAAA,MACrCC,QADqC,aACrCA,QADqC;AAAA,MAC3BC,QAD2B,aAC3BA,QAD2B;AAAA,MACjBC,IADiB,aACjBA,IADiB;AAAA,MACXC,KADW,aACXA,KADW;;AAE3C,MAAI,CAACH,QAAD,IAAa,CAACC,QAAd,IAA0B,CAACC,IAA3B,IAAmC,CAACC,KAAxC,EACE,OAAOL,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gCAAX,EAArB,CAAP;AACF,mBAAOC,IAAP,CAAYN,QAAZ,EAAsB,CAAtB,EAAyB,UAASO,GAAT,EAAcD,IAAd,EAAoB;AAC3C,QAAIC,GAAJ,EAAS,OAAOV,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,GAArB,CAAP;AACT;AACA,sBAAQC,MAAR,CAAe;AACbT,wBADa;AAEbC,wBAFa;AAGbM,gBAHa;AAIbL,gBAJa;AAKbC;AALa,KAAf,EAOGO,IAPH,CAOQ,mBAAW;AACf,aAAOZ,IAAIO,IAAJ,CAASM,OAAT,CAAP;AACD,KATH,EAUGC,KAVH,CAUS,eAAO;AACZ,aAAOd,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,GAArB,CAAP;AACD,KAZH;AAaD,GAhBD;AAiBD,CArBM;;AAuBA,IAAMK,sCAAe,SAAfA,YAAe,CAAChB,GAAD,EAAMC,GAAN,EAAc;AAAA,mBACXD,IAAIE,IADO;AAAA,MAClCC,QADkC,cAClCA,QADkC;AAAA,MACxBC,QADwB,cACxBA,QADwB;;AAExC,oBAAQa,OAAR,CAAgB,EAAEd,kBAAF,EAAhB,EACGU,IADH,CACQ,mBAAW;AACf,QAAI,CAACC,OAAL,EAAc;AACZ,aAAOb,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uBAAX,EAArB,CAAP;AACD;AACD,qBAAOS,OAAP,CAAed,QAAf,EAAyBU,QAAQJ,IAAjC,EAAuC,UAACC,GAAD,EAAMQ,MAAN,EAAiB;AACtD,UAAIR,GAAJ,EAAS,OAAOV,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,GAArB,CAAP;AACT,UAAIQ,MAAJ,EAAY;AACV,eAAOlB,IAAIO,IAAJ,CAASM,OAAT,CAAP;AACD,OAFD,MAEO;AACL,eAAOb,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEY,SAAS,gCAAX,EAArB,CAAP;AACD;AACF,KAPD;AAQD,GAbH,EAcGL,KAdH,CAcS,eAAO;AACZM,YAAQC,KAAR,CAAcX,GAAd;AACAV,QAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,GAArB;AACD,GAjBH;AAkBD,CApBM","file":"auth.controller.js","sourcesContent":["import bcrypt from 'bcrypt';\n\nimport Student from '../models/Student';\n\nexport const RegisterStudent = (req, res) => {\n  let { username, password, name, phone } = req.body;\n  if (!username || !password || !name || !phone)\n    return res.status(401).json({ message: 'Some Credentials not Provided.' });\n  bcrypt.hash(password, 8, function(err, hash) {\n    if (err) return res.status(500).json(err);\n    // Store hash in your password DB.\n    Student.create({\n      username,\n      password,\n      hash,\n      name,\n      phone,\n    })\n      .then(student => {\n        return res.json(student);\n      })\n      .catch(err => {\n        return res.status(500).json(err);\n      });\n  });\n};\n\nexport const LoginStudent = (req, res) => {\n  let { username, password } = req.body;\n  Student.findOne({ username })\n    .then(student => {\n      if (!student) {\n        return res.status(401).json({ message: 'Username is Incorrect' });\n      }\n      bcrypt.compare(password, student.hash, (err, result) => {\n        if (err) return res.status(400).json(err);\n        if (result) {\n          return res.json(student);\n        } else {\n          return res.status(401).json({ messgae: 'Username or Password Incorrect' });\n        }\n      });\n    })\n    .catch(err => {\n      console.error(err);\n      res.status(500).json(err);\n    });\n};\n"]}