{"version":3,"sources":["../../server/controllers/auth.js"],"names":["Register","req","res","type","body","userType","userRegister","user","then","createUser","schoolId","sid","json","message","catch","status","err","id","newUser","Promise","resolve","reject","register","password","CreateSchool","shortCode","Math","floor","random","create","data","adminObj","email","username","phoneNumber","fullName","schoolName","all","authn","error","User","Login","salt","undefined","hash","AuthMe","authenticated","RedirectNoAuth","next","redirect","Logout","logout"],"mappings":"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","file":"auth.js","sourcesContent":["import regeneratorRuntime from 'regenerator-runtime';\n\nimport Users from '../models/Users';\nimport Teacher from '../models/Teacher';\nimport Student from '../models/Student';\nimport Admin from '../models/Admin';\nimport School from '../models/School';\nimport { resolve } from 'path';\n\nexport const Register = (req, res) => {\n  let type = req.body.userType;\n  if (req.body.userType !== 'super') {\n    userRegister(req.body, req.user)\n      .then(user => {\n        if (user.userType) {\n          createUser(type, { ...req.body, schoolId: req.user.schoolId }, user.sid)\n            .then(user => {\n              return res.json({\n                message: 'Registered Successfully',\n                user: { ...user },\n              });\n            })\n            .catch(err => {\n              return res.status(400).json({\n                message: err.message,\n              });\n            });\n        }\n      })\n      .catch(err => {\n        return res.status(400).json({\n          message: err.message,\n        });\n      });\n  } else {\n    userRegister(req.body)\n      .then(user => {\n        return res.json({\n          message: 'Registered Successfully',\n          user: { ...user },\n        });\n      })\n      .catch(err => {\n        return res.status(400).json({\n          message: err.message,\n        });\n      });\n  }\n};\n\nconst userRegister = (body, user) => {\n  let type = body.userType;\n  let id = user ? user.schoolId : 'super';\n\n  let newUser = new Users({\n    ...body,\n    userType: body.userType === 'school' ? 'admin' : body.userType,\n    schoolId: id,\n  });\n\n  return new Promise((resolve, reject) => {\n    Users.register(newUser, body.password, (err, user) => {\n      if (err) {\n        reject(err);\n      }\n      resolve(user);\n    });\n  });\n};\n\nexport const CreateSchool = (req, res) => {\n  let schoolId = req.body.shortCode + Math.floor(Math.random() * (1000 - 1 + 1)) + 1;\n\n  School.create({\n    ...req.body,\n    schoolId,\n  })\n    .then(async data => {\n      let adminObj = {\n        userType: 'admin',\n        email: data.email,\n        username: data.shortCode,\n        phoneNumber: data.phoneNumber,\n        fullName: data.schoolName,\n        schoolId: data.schoolId,\n        password: req.body.password,\n        sid: data.sid,\n      };\n      try {\n        let [user, authn] = await Promise.all([\n          createUser('admin', adminObj, data.sid),\n          userRegister(adminObj, adminObj),\n        ]);\n        return res.json({\n          user,\n          authn,\n        });\n      } catch (err) {\n        res.status(500).json({\n          message: 'Error Registering User',\n          error: err.message,\n        });\n      }\n    })\n    .catch(err => {\n      res.status(500).json({\n        message: 'Error Registering School',\n        error: err.message,\n      });\n    });\n};\n\nconst createUser = (userType, body, id) => {\n  let User =\n    userType === 'teacher'\n      ? Teacher\n      : userType === 'student' ? Student : userType === 'admin' ? Admin : Teacher;\n  return new Promise((resolve, reject) => {\n    User.create({ ...body, sid: id })\n      .then(user => {\n        resolve(user);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nexport const Login = (req, res) => {\n  let user = req.user;\n  return res.json({\n    message: 'Login Successful',\n    user: {\n      ...req.user,\n      salt: undefined,\n      hash: undefined,\n    },\n  });\n};\n\n// Get user data from client side\nexport const AuthMe = (req, res) => {\n  if (req.user) {\n    return res.json({\n      authenticated: true,\n      user: req.user,\n    });\n  }\n  return res.json({\n    authenticated: false,\n  });\n};\n\n// Auth Middleware\nexport const RedirectNoAuth = (req, res, next) => {\n  if (!req.user) {\n    return res.redirect('/whatever');\n  }\n  return next();\n};\n\nexport const Logout = (req, res) => {\n  req.logout();\n  res.json({\n    message: 'Logout',\n  });\n};\n"]}