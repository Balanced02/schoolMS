{"version":3,"sources":["../../server/controllers/auth.js"],"names":["Register","req","res","type","body","userType","userRegister","user","then","createUser","schoolId","sid","json","message","catch","console","log","err","status","id","newUser","Promise","resolve","reject","register","password","CreateSchool","shortCode","Math","floor","random","create","data","adminObj","email","username","phoneNumber","fullName","schoolName","all","authn","error","User","Login","salt","undefined","hash","AuthMe","authenticated","RedirectNoAuth","next","redirect","Logout","logout"],"mappings":"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","file":"auth.js","sourcesContent":["import regeneratorRuntime from 'regenerator-runtime';\n\nimport Users from '../models/Users';\nimport Teacher from '../models/Teacher';\nimport Student from '../models/Student';\nimport Admin from '../models/Admin';\nimport School from '../models/School';\nimport { resolve } from 'path';\n\nexport const Register = (req, res) => {\n  let type = req.body.userType;\n  if (req.body.userType !== 'super') {\n    userRegister(req.body, req.user)\n      .then(user => {\n        if (user.userType) {\n          createUser(type, { ...req.body, schoolId: req.user.schoolId }, user.sid)\n            .then(user => {\n              return res.json({\n                message: 'Registered Successfully',\n                user: { ...user },\n              });\n            })\n            .catch(err => {\n              console.log(err);\n              return res.status(400).json({\n                message: err.message,\n              });\n            });\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        return res.status(400).json({\n          message: err.message,\n        });\n      });\n  } else {\n    userRegister(req.body)\n      .then(user => {\n        return res.json({\n          message: 'Registered Successfully',\n          user: { ...user },\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        return res.status(400).json({\n          message: err.message,\n        });\n      });\n  }\n};\n\nconst userRegister = (body, user) => {\n  let type = body.userType;\n  let id = user ? user.schoolId : 'super';\n  console.log('Details: ' + id + 'type: ' + type);\n  let newUser = new Users({\n    ...body,\n    userType: body.userType === 'school' ? 'admin' : body.userType,\n    schoolId: id,\n  });\n\n  return new Promise((resolve, reject) => {\n    Users.register(newUser, body.password, (err, user) => {\n      if (err) {\n        console.log(err);\n        reject(err);\n      }\n      resolve(user);\n    });\n  });\n};\n\nexport const CreateSchool = (req, res) => {\n  let schoolId = req.body.shortCode + Math.floor(Math.random() * (1000 - 1 + 1)) + 1;\n  console.log('School Id: ' + schoolId);\n  School.create({\n    ...req.body,\n    schoolId,\n  })\n    .then(async data => {\n      console.log(data);\n      let adminObj = {\n        userType: 'admin',\n        email: data.email,\n        username: data.shortCode,\n        phoneNumber: data.phoneNumber,\n        fullName: data.schoolName,\n        schoolId: data.schoolId,\n        password: req.body.password,\n        sid: data.sid,\n      };\n      try {\n        let [user, authn] = await Promise.all([\n          createUser('admin', adminObj, data.sid),\n          userRegister(adminObj, adminObj),\n        ]);\n        return res.json({\n          user,\n          authn,\n        });\n      } catch (err) {\n        console.log(err);\n        res.status(500).json({\n          message: 'Error Registering User',\n          error: err.message,\n        });\n      }\n    })\n    .catch(err => {\n      console.log(err);\n      res.status(500).json({\n        message: 'Error Registering School',\n        error: err.message,\n      });\n    });\n};\n\nconst createUser = (userType, body, id) => {\n  console.log('Creating: ' + id);\n  let User =\n    userType === 'teacher'\n      ? Teacher\n      : userType === 'student' ? Student : userType === 'admin' ? Admin : Teacher;\n  return new Promise((resolve, reject) => {\n    User.create({ ...body, sid: id })\n      .then(user => {\n        console.log(user);\n        resolve(user);\n      })\n      .catch(err => {\n        console.log(err);\n        reject(err);\n      });\n  });\n};\n\nexport const Login = (req, res) => {\n  let user = req.user;\n  return res.json({\n    message: 'Login Successful',\n    user: {\n      ...req.user,\n      salt: undefined,\n      hash: undefined,\n    },\n  });\n};\n\n// Get user data from client side\nexport const AuthMe = (req, res) => {\n  if (req.user) {\n    return res.json({\n      authenticated: true,\n      user: req.user,\n    });\n  }\n  return res.json({\n    authenticated: false,\n  });\n};\n\n// Auth Middleware\nexport const RedirectNoAuth = (req, res, next) => {\n  if (!req.user) {\n    return res.redirect('/whatever');\n  }\n  return next();\n};\n\nexport const Logout = (req, res) => {\n  req.logout();\n  res.json({\n    message: 'Logout',\n  });\n};\n"]}